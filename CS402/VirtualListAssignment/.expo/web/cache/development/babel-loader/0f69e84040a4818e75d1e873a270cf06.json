{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport VirtualizedList from \"react-native-web/dist/exports/VirtualizedList\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  innerButton: {\n    marginRight: 10,\n    marginTop: 75,\n    marginBottom: 0,\n    width: 75\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    backgroundColor: 'orange',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  textField: {\n    height: 40,\n    margin: 12,\n    width: 310,\n    color: 'white',\n    borderWidth: 1,\n    borderColor: 'white',\n    padding: 10\n  },\n  textContainer: {\n    marginTop: 0,\n    backgroundColor: 'orange',\n    alignItems: 'center',\n    textAlign: 'center',\n    justifyContent: 'center'\n  },\n  item: {\n    padding: 10,\n    fontSize: 22,\n    height: 44,\n    color: \"black\"\n  }\n});\nvar dataList = [];\n\nvar Item = function Item(_ref) {\n  var item = _ref.item,\n      onPress = _ref.onPress,\n      backgroundColor = _ref.backgroundColor,\n      textColor = _ref.textColor;\n  return _jsx(TouchableOpacity, {\n    onPress: onPress,\n    style: [styles.item, backgroundColor],\n    children: _jsx(Text, {\n      style: [textColor],\n      children: item.key\n    })\n  });\n};\n\nvar VirtualList = function VirtualList() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      list = _useState2[0],\n      setList = _useState2[1];\n\n  var _useState3 = useState(\"Add an item\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      text = _useState4[0],\n      onChangeText = _useState4[1];\n\n  function toggleItem(key) {\n    var newList = list.map(function (listItem) {\n      if (listItem.key === key) {\n        listItem.selected = !listItem.selected;\n      }\n\n      return listItem;\n    });\n    setList(newList);\n  }\n\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n\n    var _ref3 = item.selected ? ['black', 'white'] : ['white', 'black'],\n        _ref4 = _slicedToArray(_ref3, 2),\n        backgroundColor = _ref4[0],\n        color = _ref4[1];\n\n    return _jsx(Item, {\n      item: item,\n      onPress: function onPress() {\n        return toggleItem(item.key);\n      },\n      backgroundColor: {\n        backgroundColor: backgroundColor\n      },\n      textColor: {\n        color: color\n      }\n    });\n  };\n\n  function deleteItems() {\n    setList(list.filter(function (listItem) {\n      return !listItem.selected;\n    }));\n  }\n\n  function addItem() {\n    var item = {\n      key: text,\n      selected: false\n    };\n    var count = list.filter(function (listItem) {\n      return listItem.key === text;\n    }).length;\n\n    var newList = _toConsumableArray(list);\n\n    if (!count) {\n      var addIndex = list.findIndex(function (listItem) {\n        return listItem.selected;\n      });\n      addIndex = addIndex >= 0 ? addIndex : 0;\n      newList.splice(addIndex, 0, item);\n      setList(newList);\n    } else {\n      alert(\"Duplicate entry for item \\\"\" + text + \"\\\"\");\n    }\n  }\n\n  var getItemCount = function getItemCount(data) {\n    return list.length;\n  };\n\n  var getItem = function getItem(index, key) {\n    return list[key];\n  };\n\n  function splitList() {\n    var newList = [];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(list), _step; !(_step = _iterator()).done;) {\n      var listItem = _step.value;\n\n      if (listItem.selected) {\n        var newItems = listItem.key.split(\",\");\n        newItems.map(function (item) {\n          var obj = {\n            key: item.trim(),\n            selected: false\n          };\n          newList.push(obj);\n        });\n      } else {\n        newList.push(listItem);\n      }\n    }\n\n    setList(newList);\n  }\n\n  function joinList() {\n    var newList = [];\n    var selectedItems = [];\n    var firstSelectedIndex = null;\n\n    for (var i = 0; i < list.length; i++) {\n      var listItem = list[i];\n\n      if (listItem.selected) {\n        var _firstSelectedIndex;\n\n        firstSelectedIndex = (_firstSelectedIndex = firstSelectedIndex) != null ? _firstSelectedIndex : i;\n        selectedItems.push(listItem.key);\n      } else {\n        newList.push(listItem);\n      }\n    }\n\n    var addItem = {};\n    addItem.key = selectedItems.join(\", \");\n    addItem.selected = false;\n\n    if (firstSelectedIndex != null) {\n      newList.splice(firstSelectedIndex, 0, addItem);\n      setList(newList);\n    }\n  }\n\n  var VirtualList = _jsxs(View, {\n    children: [_jsxs(View, {\n      style: styles.buttonContainer,\n      children: [_jsx(View, {\n        style: styles.innerButton,\n        children: _jsx(Button, {\n          style: true,\n          title: \"+\",\n          onPress: addItem\n        })\n      }), _jsx(View, {\n        style: styles.innerButton,\n        children: _jsx(Button, {\n          title: \"-\",\n          onPress: deleteItems\n        })\n      }), _jsx(View, {\n        style: styles.innerButton,\n        children: _jsx(Button, {\n          title: \"Split\",\n          onPress: splitList\n        })\n      }), _jsx(View, {\n        style: styles.innerButton,\n        children: _jsx(Button, {\n          title: \"Join\",\n          onPress: joinList\n        })\n      })]\n    }), _jsx(View, {\n      style: styles.textContainer,\n      children: _jsx(TextInput, {\n        style: styles.textField,\n        onChangeText: onChangeText,\n        value: text\n      })\n    }), _jsx(VirtualizedList, {\n      data: dataList,\n      initialNumToRender: 4,\n      getItemCount: getItemCount,\n      getItem: getItem,\n      keyExtractor: function keyExtractor(item, index) {\n        return index;\n      },\n      renderItem: renderItem\n    })]\n  });\n\n  return flatList;\n};\n\nexport default VirtualList;","map":{"version":3,"sources":["/home/aidanleuck/Code/BSURepo/CS402/VirtualListAssignment/App.js"],"names":["React","useState","styles","StyleSheet","create","innerButton","marginRight","marginTop","marginBottom","width","buttonContainer","flexDirection","backgroundColor","alignItems","justifyContent","textField","height","margin","color","borderWidth","borderColor","padding","textContainer","textAlign","item","fontSize","dataList","Item","onPress","textColor","key","VirtualList","list","setList","text","onChangeText","toggleItem","newList","map","listItem","selected","renderItem","deleteItems","filter","addItem","count","length","addIndex","findIndex","splice","alert","getItemCount","data","getItem","index","splitList","newItems","split","obj","trim","push","joinList","selectedItems","firstSelectedIndex","i","join","flatList"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity, Button, TextInput, VirtualizedList } from 'react-native';\n\n// Styles \nconst styles = StyleSheet.create({\n  innerButton:{\n    marginRight: 10,\n    marginTop: 75,\n    marginBottom: 0,\n    width: 75,\n  },\n  buttonContainer: {\n    flexDirection: 'row',\n    backgroundColor: 'orange',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  textField:{\n    height: 40,\n    margin: 12,\n    width: 310,\n    color: 'white',\n    borderWidth: 1,\n    borderColor: 'white',\n    padding: 10,  \n  },\n  textContainer:{\n    marginTop: 0,\n    backgroundColor: 'orange',\n    alignItems: 'center',\n    textAlign: 'center',\n    justifyContent: 'center'\n  },\n  item: {\n    padding: 10,\n    fontSize: 22,\n    height: 44,\n    color: \"black\",\n  },\n});\n\nlet dataList = [];\n\n/**\n * Describes an item component\n * @param {*} item - item object containing key and selected\n * @param {*} onPress - Function to execute when list item is pressed\n * @param {*} backgroundColor - Background color to change to on press\n * @param {*} textColor - color of the text\n * @returns Built item functional component\n */\nconst Item = ({ item, onPress, backgroundColor, textColor }) => (\n  <TouchableOpacity onPress={onPress} style={[styles.item, backgroundColor]}>\n    <Text style={[textColor]}>{item.key}</Text>\n  </TouchableOpacity>\n);\n\n/**\n * Builds up a FlatList\n * @returns A Flatlist\n */\nconst VirtualList = () => {\n\n  // States\n  const [list, setList] = useState([]);\n  const [text, onChangeText] = useState(\"Add an item\")\n\n\n  // Toggles an item between selected and not selected\n  // key : key in list to find\n  function toggleItem(key) {\n    const newList = list.map((listItem) => {\n      if (listItem.key === key) {\n        listItem.selected = !listItem.selected;\n      }\n      return listItem;\n    })\n    setList(newList);\n  }\n\n  /**\n   * Describes how an item should be rendered\n   * @param {*} item item object from array\n   */\n  const renderItem = ({ item }) => {\n\n    // Toggles black/white background color depending on selection\n    const [backgroundColor, color] = item.selected ? ['black', 'white'] : ['white', 'black'];\n    return (\n      <Item\n        item={item}\n        onPress={() => toggleItem(item.key)}\n        backgroundColor={{ backgroundColor }}\n        textColor={{ color }}>\n      </Item>\n    )\n  }\n\n  /**\n   * Deletes selected items\n   */\n  function deleteItems() {\n    setList(list.filter((listItem) => !listItem.selected))\n  }\n\n  /**\n   * Adds an item to the lsit\n   */\n  function addItem() {\n    let item = {\n      key: text,\n      selected: false\n    }\n\n    // Check for duplicate entries\n    let count = list.filter((listItem) => listItem.key === text).length\n    let newList = [...list];\n\n    // If no duplicates\n    if (!count) {\n\n      // Find the first selected index\n      let addIndex = list.findIndex((listItem) => listItem.selected)\n\n      // If there is a selected index then keep same value otherwise just add to 0\n      addIndex = addIndex >= 0 ? addIndex : 0;\n\n      // Splice to add item into the array\n      newList.splice(addIndex, 0, item);\n      setList(newList);\n    }\n    else {\n      alert(`Duplicate entry for item \"${text}\"`);\n    }\n  }\n\n  const getItemCount = (data) => list.length;\n  const getItem = (index, key) => list[key];\n\n  /**\n   * Splits list items separated by commas\n   */\n  function splitList() {\n    let newList = [];\n    for (const listItem of list) {\n\n      // Finds selected items\n      if (listItem.selected) {\n        let newItems = listItem.key.split(\",\");\n\n        // Builds up the object and deselects them\n        newItems.map((item) => {\n          let obj = { key: item.trim(), selected: false }\n          newList.push(obj);\n        })\n      }\n      else {\n        newList.push(listItem);\n      }\n    }\n    setList(newList);\n  }\n\n  /**\n   * Joins list items separated by commas\n   */\n  function joinList() {\n    let newList = [];\n    let selectedItems = [];\n    let firstSelectedIndex = null;\n\n    for (let i = 0; i < list.length; i++) {\n      const listItem = list[i];\n\n      // Gets selected items and saves the first found index\n      if (listItem.selected) {\n        firstSelectedIndex = firstSelectedIndex ?? i;\n        selectedItems.push(listItem.key);\n      }\n      else{\n        newList.push(listItem);\n      }\n    }\n\n    // Adds new item\n    let addItem = {};\n    addItem.key = selectedItems.join(\", \")\n    addItem.selected = false;\n\n    // If there was a first selected index splice in\n    if(firstSelectedIndex != null){\n      newList.splice(firstSelectedIndex, 0, addItem);\n      setList(newList)\n    }\n  }\n\n  /**\n   * Main flat list render method\n   */\n  const VirtualList = <View>\n    <View style={styles.buttonContainer}>\n      <View style={styles.innerButton}>\n      <Button style title=\"+\"\n        onPress={addItem} />\n      </View>\n      <View style={styles.innerButton}>\n      <Button title=\"-\"\n        onPress={deleteItems} />\n      </View>\n      <View style={styles.innerButton}>\n      <Button title=\"Split\"\n        onPress={splitList} />\n      </View>\n      <View style={styles.innerButton}>\n      <Button \n        title=\"Join\"\n        onPress={joinList} />\n      </View>\n    </View>\n    <View style={styles.textContainer}>\n    <TextInput style={styles.textField}\n        onChangeText={onChangeText}\n        value={text}\n      />\n    </View>\n    <VirtualizedList \n      data={dataList}\n      initialNumToRender={4}\n      getItemCount={getItemCount}\n      getItem={getItem}\n      keyExtractor={(item, index) => index}\n      renderItem={renderItem}\n\n    />\n  </View>\n  return (flatList)\n}\n\nexport default VirtualList;"]},"metadata":{},"sourceType":"module"}